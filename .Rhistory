rm(A1)
A1 <- 12
# Just like in Python and Java
# = is assignment operator
# == checks if 'equal to'
A1 <- c(12, 10, 8, 6, 4, 2)
SUM1 = sum(A1)
# Unlike all other coding languages, R starts indexing at one, NOT Zero.
A1[1] <- 10
# Row binding
A1 <- rbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Column binding
B1 <- cbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Matrix binding
C1 <- matrix( c(1,2,3,4,5,6,7,8,9), nrow =3, ncol=3, byrow=TRUE)
A1 <- 1:20
B1 <- seq(2, 40, 2)
C1 <- A1 + B1
str(C1)
mean(C1)
median(C1)
mode(C1)
var(C1)
sd(C1)
sqrt(var(C1))
rm(A1)
A1 <- 12
# Just like in Python and Java
# = is assignment operator
# == checks if 'equal to'
A1 <- c(12, 10, 8, 6, 4, 2)
SUM1 = sum(A1)
# Unlike all other coding languages, R starts indexing at one, NOT Zero.
A1[1] <- 10
# Row binding
A1 <- rbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Column binding
B1 <- cbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Matrix binding
C1 <- matrix( c(1,2,3,4,5,6,7,8,9), nrow =3, ncol=3, byrow=TRUE)
A1 <- 1:20
B1 <- seq(2, 40, 2)
C1 <- A1 + B1
str(C1)
mean(C1)
median(C1)
mode(C1)
var(C1)
sd(C1)
sqrt(var(C1))
rm(A1)
# Data Frames
Name <- c("John", "Joe", "Mary", "Lisa")
Sales <- c(2500.2, 3750.0, 4240.0, 1950.0)
Area <- c("South", "South", "West", "North")
df <- data.frame(Name, Sales, Area)
View(df)
str(df)
df$Name
df$Area <- factor(df$Area, levels = c("South", "West", "North"), lables=c(1,2,3))
df$Area <- factor(df$Area, levels = c("South", "West", "North"), lables=c(1,2,3))
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
str(df$Area)
str(df$Area)
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
str(df$Area)
A1 <- 12
# Just like in Python and Java
# = is assignment operator
# == checks if 'equal to'
A1 <- c(12, 10, 8, 6, 4, 2)
SUM1 = sum(A1)
# Unlike all other coding languages, R starts indexing at one, NOT Zero.
A1[1] <- 10
# Row binding
A1 <- rbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Column binding
B1 <- cbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Matrix binding
C1 <- matrix( c(1,2,3,4,5,6,7,8,9), nrow =3, ncol=3, byrow=TRUE)
A1 <- 1:20
B1 <- seq(2, 40, 2)
C1 <- A1 + B1
str(C1)
mean(C1)
median(C1)
mode(C1)
var(C1)
sd(C1)
sqrt(var(C1))
# Removing individual variables
rm(A1)
# Data Frames
Name <- c("John", "Joe", "Mary", "Lisa")
Sales <- c(2500.2, 3750.0, 4240.0, 1950.0)
Area <- c("South", "South", "West", "North")
df <- data.frame(Name, Sales, Area)
# Very important, will be done a lot
df$Name
# Reassign factors to a variable
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
str(df$Area)
data("iris")
A1 <- 12
# Just like in Python and Java
# = is assignment operator
# == checks if 'equal to'
A1 <- c(12, 10, 8, 6, 4, 2)
SUM1 = sum(A1)
# Unlike all other coding languages, R starts indexing at one, NOT Zero.
A1[1] <- 10
# Row binding
A1 <- rbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Column binding
B1 <- cbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Matrix binding
C1 <- matrix( c(1,2,3,4,5,6,7,8,9), nrow =3, ncol=3, byrow=TRUE)
A1 <- 1:20
B1 <- seq(2, 40, 2)
C1 <- A1 + B1
str(C1)
mean(C1)
median(C1)
mode(C1)
var(C1)
sd(C1)
sqrt(var(C1))
# Removing individual variables
rm(A1)
# Data Frames
Name <- c("John", "Joe", "Mary", "Lisa")
Sales <- c(2500.2, 3750.0, 4240.0, 1950.0)
Area <- c("South", "South", "West", "North")
df <- data.frame(Name, Sales, Area)
# Very important, will be done a lot
df$Name
# Reassign factors to a variable
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
# Introduction to Data Visualization
data("iris")
summary(iris)
A1 <- 12
# Just like in Python and Java
# = is assignment operator
# == checks if 'equal to'
A1 <- c(12, 10, 8, 6, 4, 2)
SUM1 = sum(A1)
# Unlike all other coding languages, R starts indexing at one, NOT Zero.
A1[1] <- 10
# Row binding
A1 <- rbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Column binding
B1 <- cbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Matrix binding
C1 <- matrix( c(1,2,3,4,5,6,7,8,9), nrow =3, ncol=3, byrow=TRUE)
A1 <- 1:20
B1 <- seq(2, 40, 2)
C1 <- A1 + B1
str(C1)
mean(C1)
median(C1)
mode(C1)
var(C1)
sd(C1)
sqrt(var(C1))
# Removing individual variables
rm(A1)
# Data Frames
Name <- c("John", "Joe", "Mary", "Lisa")
Sales <- c(2500.2, 3750.0, 4240.0, 1950.0)
Area <- c("South", "South", "West", "North")
df <- data.frame(Name, Sales, Area)
# Very important, will be done a lot
df$Name
# Reassign factors to a variable
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
# Introduction to Data Visualization
data("iris")
summary(iris)
sl <- iris$Sepal.Length
hist(sl)
sl
View(sl)
hist(sl, freq = FALSE)
lines(sl.d)
A1 <- 12
# Just like in Python and Java
# = is assignment operator
# == checks if 'equal to'
A1 <- c(12, 10, 8, 6, 4, 2)
SUM1 = sum(A1)
# Unlike all other coding languages, R starts indexing at one, NOT Zero.
A1[1] <- 10
# Row binding
A1 <- rbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Column binding
B1 <- cbind(c(1,2,3), c(4, 5, 6), c(7,8,9))
# Matrix binding
C1 <- matrix( c(1,2,3,4,5,6,7,8,9), nrow =3, ncol=3, byrow=TRUE)
A1 <- 1:20
B1 <- seq(2, 40, 2)
C1 <- A1 + B1
str(C1)
mean(C1)
median(C1)
mode(C1)
var(C1)
sd(C1)
sqrt(var(C1))
# Removing individual variables
rm(A1)
# Data Frames
Name <- c("John", "Joe", "Mary", "Lisa")
Sales <- c(2500.2, 3750.0, 4240.0, 1950.0)
Area <- c("South", "South", "West", "North")
df <- data.frame(Name, Sales, Area)
# Very important, will be done a lot
df$Name
# Reassign factors to a variable
df$Area <- factor(df$Area, levels = c("South", "West", "North"), labels=c(1,2,3))
# Introduction to Data Visualization
data("iris")
summary(iris)
sl <- iris$Sepal.Length
hist(sl)
sl.d <- density(sl)
plot(sl.d)
# Histogram by probability
hist(sl, freq = FALSE)
lines(sl.d)
pairs(iris[,1:4])
install.packages("psych")
install.packages("psych")
library(psych)
library(psych)
pairs.panels(iris)
setwd("~/Documents/Academics/AdvancedBusinessAnalytics")
creditData <- read.csv('GermanCredit.csv')
creditData <- creditData[ , -which(names(creditData) %in% c("NumberPeopleMaintenance"))]
creditData <- creditData[ , -which(names(creditData) %in% c("Purpose.Vacation"))]
creditData <- creditData[ , -which(names(creditData) %in% c("Purpose.DomesticAppliance"))]
creditData <- creditData[,1:25]
# Encoding not needed
creditData$Class = factor(creditData$Class, levels = c("Good", "Bad"), labels = c(1, 0))
library(caTools)
# creditData <- creditData[rowSums(is.na(creditData)) == 0, ]
targetColNum = as.numeric(which( colnames(creditData)=='Class' ))
set.seed(7)
#
# split = sample.split(creditData$Liked, 0.75)
# training_set = subset(creditData, split= TRUE)
# test_set = subset(creditData, split = FALSE)
#
# Feature Scaling
# training_set[-targetColNum] = scale(training_set[-targetColNum])
# test_set[-targetColNum] = scale(training_set[-targetColNum])
# Feature Ranking
# set.seed(7)
# install.packages('mlbench')
# install.packages('caret')
library(mlbench)
library(caret)
library(e1071)
library(class)
#
#
# #knn
# best_k <- 1
#
# y_predict = knn(training_set[,-targetColNum], test_set[,-targetColNum], cl = training_set[,targetColNum], k=best_k)
# knn_con_matrix = table(test_set[,targetColNum], y_predict)
# knn_con_matrix
# knn_true_zero = as.numeric(knn_con_matrix[1, 1])
# knn_false_zero = as.numeric(knn_con_matrix[1, 2])
# knn_true_one = as.numeric(knn_con_matrix[2, 2])
# knn_false_one = as.numeric(knn_con_matrix[2, 1])
# knn_accuracy = (knn_true_one + knn_true_zero)/(knn_true_one + knn_true_zero + knn_false_one + knn_false_zero)
# print(paste("knn Accuracy: ", toString(knn_accuracy*100) ))
# Prepare the training scheme
control <- trainControl(method='repeatedcv', number = 10, repeats = 3)
# Train the model
model <- train(Class~., data=creditData, method = "lvq", preProcess = "scale", trControl = control)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
importance <- varImp(model, scale=FALSE)
model <- train(Class~., data=creditData, method = "lvq", preProcess = "scale", trControl = control)
control <- trainControl(method='repeatedcv', number = 10, repeats = 3)
model <- train(Class~., data=creditData, method = "lvq", preProcess = "scale", trControl = control)
creditData <- read.csv('GermanCredit.csv')
setwd("~/Documents/Academics/AdvancedBusinessAnalytics/german-credit")
creditData <- read.csv('GermanCredit.csv')
creditData <- creditData[ , -which(names(creditData) %in% c("NumberPeopleMaintenance"))]
creditData <- creditData[ , -which(names(creditData) %in% c("Purpose.Vacation"))]
creditData <- creditData[ , -which(names(creditData) %in% c("Purpose.DomesticAppliance"))]
creditData <- creditData[,1:25]
# Encoding not needed
creditData$Class = factor(creditData$Class, levels = c("Good", "Bad"), labels = c(1, 0))
library(caTools)
# creditData <- creditData[rowSums(is.na(creditData)) == 0, ]
targetColNum = as.numeric(which( colnames(creditData)=='Class' ))
set.seed(7)
#
# split = sample.split(creditData$Liked, 0.75)
# training_set = subset(creditData, split= TRUE)
# test_set = subset(creditData, split = FALSE)
#
# Feature Scaling
# training_set[-targetColNum] = scale(training_set[-targetColNum])
# test_set[-targetColNum] = scale(training_set[-targetColNum])
# Feature Ranking
# set.seed(7)
# install.packages('mlbench')
# install.packages('caret')
library(mlbench)
library(caret)
library(e1071)
library(class)
#
#
# #knn
# best_k <- 1
#
# y_predict = knn(training_set[,-targetColNum], test_set[,-targetColNum], cl = training_set[,targetColNum], k=best_k)
# knn_con_matrix = table(test_set[,targetColNum], y_predict)
# knn_con_matrix
# knn_true_zero = as.numeric(knn_con_matrix[1, 1])
# knn_false_zero = as.numeric(knn_con_matrix[1, 2])
# knn_true_one = as.numeric(knn_con_matrix[2, 2])
# knn_false_one = as.numeric(knn_con_matrix[2, 1])
# knn_accuracy = (knn_true_one + knn_true_zero)/(knn_true_one + knn_true_zero + knn_false_one + knn_false_zero)
# print(paste("knn Accuracy: ", toString(knn_accuracy*100) ))
# Prepare the training scheme
control <- trainControl(method='repeatedcv', number = 10, repeats = 3)
# Train the model
model <- train(Class~., data=creditData, method = "lvq", preProcess = "scale", trControl = control)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
library(caTools)
library(psych)
relevantData <- read.csv('GermanCredit.csv')
# The variables below were removed because they either improved accuracy
#   or once removed they tydid not affect accuracy rate of the matrix
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Telephone"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("ForeignWorker"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Property.Unknown"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("SavingsAccountBonds.Unknown"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Male.Married.Widowed"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Female.NotSingle"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("OtherInstallmentPlans.None"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.Other"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Male.Divorced.Seperated"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Female.Single"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("OtherDebtorsGuarantors.None"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.Vacation"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Housing.ForFree"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.UnskilledResident"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.SkilledEmployee"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.UnemployedUnskilled"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("EmploymentDuration.lt.1"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.UsedCar"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("CreditHistory.PaidDuly"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("ResidenceDuration"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("NumberPeopleMaintenance"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("CheckingAccountStatus.0.to.200"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.Management.SelfEmp.HighlyQualified"))]
relevantData$Class = factor(relevantData$Class, levels=c('Bad', 'Good'), labels = c(0, 1))
targetVarColNum = as.numeric(which( colnames(relevantData)=='Class' ))
set.seed(42)
split = sample.split(relevantData$Class, 0.75)
training_set = subset(relevantData, split= TRUE)
test_set = subset(relevantData, split = FALSE)
classifier = glm(formula = Class ~ ., family = binomial, data=training_set)
prob_predict = predict(classifier, type = 'response', relevantData1 = test_set[-targetVarColNum])
Class_predict = ifelse(prob_predict > 0.5, 1, 0)
con_matrix = table(test_set[, targetVarColNum], Class_predict)
con_matrix
results_matrix = data.matrix(con_matrix)
true_zero = as.numeric(results_matrix[1, 1])
false_zero = as.numeric(results_matrix[1, 2])
true_one = as.numeric(results_matrix[2, 2])
false_one = as.numeric(results_matrix[2, 1])
accuracy = (true_one + true_zero)/(true_one + true_zero + false_one + false_zero)
print(paste("Accuracy: ", toString(accuracy*100) ))
library(mlbench)
library(caret)
library(e1071)
library(class)
# The variabvles below hurt the accuracy rate once removed, so they must be kept
# NumberExistingCredits # NumberPeopleMaintenance # OtherInstallmentPlans.Stores
# SavingsAccountBonds.500.to.1000 # SavingsAccountBonds.gt.1000 # Duration # Age
# OtherInstallmentPlans.Bank # SavingsAccountBonds.100.to.500 # Amount
# CheckingAccountStatus.0.to.200 # CreditHistory.PaidDuly
library(caTools)
library(psych)
relevantData <- read.csv('GermanCredit.csv')
# The variables below were removed because they either improved accuracy
#   or once removed they tydid not affect accuracy rate of the matrix
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Telephone"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("ForeignWorker"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Property.Unknown"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("SavingsAccountBonds.Unknown"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Male.Married.Widowed"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Female.NotSingle"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("OtherInstallmentPlans.None"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.Other"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Male.Divorced.Seperated"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Female.Single"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("OtherDebtorsGuarantors.None"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.Vacation"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Housing.ForFree"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.UnskilledResident"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.SkilledEmployee"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.UnemployedUnskilled"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("EmploymentDuration.lt.1"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.UsedCar"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("CreditHistory.PaidDuly"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("ResidenceDuration"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("NumberPeopleMaintenance"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("CheckingAccountStatus.0.to.200"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.Management.SelfEmp.HighlyQualified"))]
relevantData$Class = factor(relevantData$Class, levels=c('Bad', 'Good'), labels = c(0, 1))
targetVarColNum = as.numeric(which( colnames(relevantData)=='Class' ))
set.seed(42)
split = sample.split(relevantData$Class, 0.75)
training_set = subset(relevantData, split= TRUE)
test_set = subset(relevantData, split = FALSE)
classifier = glm(formula = Class ~ ., family = binomial, data=training_set)
prob_predict = predict(classifier, type = 'response', relevantData1 = test_set[-targetVarColNum])
Class_predict = ifelse(prob_predict > 0.5, 1, 0)
con_matrix = table(test_set[, targetVarColNum], Class_predict)
con_matrix
results_matrix = data.matrix(con_matrix)
true_zero = as.numeric(results_matrix[1, 1])
false_zero = as.numeric(results_matrix[1, 2])
true_one = as.numeric(results_matrix[2, 2])
false_one = as.numeric(results_matrix[2, 1])
accuracy = (true_one + true_zero)/(true_one + true_zero + false_one + false_zero)
print(paste("Accuracy: ", toString(accuracy*100) ))
# The variabvles below hurt the accuracy rate once removed, so they must be kept
# NumberExistingCredits # NumberPeopleMaintenance # OtherInstallmentPlans.Stores
# SavingsAccountBonds.500.to.1000 # SavingsAccountBonds.gt.1000 # Duration # Age
# OtherInstallmentPlans.Bank # SavingsAccountBonds.100.to.500 # Amount
# CheckingAccountStatus.0.to.200 # CreditHistory.PaidDuly
# Plotting Variable Importance
control <- trainControl(method='repeatedcv', number = 10, repeats = 3)
# Train the model
model <- train(Class~., data=creditData, method = "lvq", preProcess = "scale", trControl = control)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
library(caTools)
library(psych)
relevantData <- read.csv('GermanCredit.csv')
# The variables below were removed because they either improved accuracy
#   or once removed they tydid not affect accuracy rate of the matrix
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Telephone"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("ForeignWorker"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Property.Unknown"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("SavingsAccountBonds.Unknown"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Male.Married.Widowed"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Female.NotSingle"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("OtherInstallmentPlans.None"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.Other"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Male.Divorced.Seperated"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Personal.Female.Single"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("OtherDebtorsGuarantors.None"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.Vacation"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Housing.ForFree"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.UnskilledResident"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.SkilledEmployee"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.UnemployedUnskilled"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("EmploymentDuration.lt.1"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Purpose.UsedCar"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("CreditHistory.PaidDuly"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("ResidenceDuration"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("NumberPeopleMaintenance"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("CheckingAccountStatus.0.to.200"))]
relevantData <- relevantData[ , -which(names(relevantData) %in% c("Job.Management.SelfEmp.HighlyQualified"))]
relevantData$Class = factor(relevantData$Class, levels=c('Bad', 'Good'), labels = c(0, 1))
targetVarColNum = as.numeric(which( colnames(relevantData)=='Class' ))
set.seed(42)
split = sample.split(relevantData$Class, 0.75)
training_set = subset(relevantData, split= TRUE)
test_set = subset(relevantData, split = FALSE)
classifier = glm(formula = Class ~ ., family = binomial, data=training_set)
prob_predict = predict(classifier, type = 'response', relevantData1 = test_set[-targetVarColNum])
Class_predict = ifelse(prob_predict > 0.5, 1, 0)
con_matrix = table(test_set[, targetVarColNum], Class_predict)
con_matrix
results_matrix = data.matrix(con_matrix)
true_zero = as.numeric(results_matrix[1, 1])
false_zero = as.numeric(results_matrix[1, 2])
true_one = as.numeric(results_matrix[2, 2])
false_one = as.numeric(results_matrix[2, 1])
accuracy = (true_one + true_zero)/(true_one + true_zero + false_one + false_zero)
print(paste("Accuracy: ", toString(accuracy*100) ))
# The variabvles below hurt the accuracy rate once removed, so they must be kept
# NumberExistingCredits # NumberPeopleMaintenance # OtherInstallmentPlans.Stores
# SavingsAccountBonds.500.to.1000 # SavingsAccountBonds.gt.1000 # Duration # Age
# OtherInstallmentPlans.Bank # SavingsAccountBonds.100.to.500 # Amount
# CheckingAccountStatus.0.to.200 # CreditHistory.PaidDuly
# Plotting Variable Importance
control <- trainControl(method='repeatedcv', number = 10, repeats = 3)
# Train the model
model <- train(Class~., data=creditData, method = "lvq", preProcess = "scale", trControl = control)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
